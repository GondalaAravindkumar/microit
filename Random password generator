<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vault Master - Password Generator</title>
    <style>
        :root {
            --primary-color: #FF5C8D;
            --secondary-color: #7000FF;
            --gradient-bg: linear-gradient(135deg, #1E1E2E 0%, #2D2B42 100%);
            --card-bg: #2A2A3A;
            --input-bg: #1E1E2E;
            --text-primary: #E9E9F0;
            --text-secondary: #9C9CB0;
            --accent-color: #FF5C8D;
            --success-color: #4CE0B3;
            --warning-color: #FFB84D;
            --danger-color: #FF5C5C;
            --border-radius: 16px;
            --small-radius: 8px;
        }
        
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        
        body {
            font-family: 'Inter', sans-serif;
            background: var(--gradient-bg);
            color: var(--text-primary);
            line-height: 1.6;
            padding: 20px;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .container {
            max-width: 580px;
            width: 100%;
            margin: 0 auto;
        }
        
        .header {
            text-align: center;
            margin-bottom: 30px;
        }
        
        .header h1 {
            font-weight: 800;
            font-size: 2.5rem;
            background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 10px;
            letter-spacing: -0.03em;
        }
        
        .header p {
            color: var(--text-secondary);
            font-size: 1rem;
        }
        
        .card {
            background: var(--card-bg);
            border-radius: var(--border-radius);
            overflow: hidden;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
        }
        
        .password-section {
            padding: 25px;
            background: linear-gradient(45deg, rgba(255, 92, 141, 0.2), rgba(112, 0, 255, 0.2));
            position: relative;
        }
        
        .password-container {
            display: flex;
            align-items: center;
            background-color: var(--input-bg);
            border-radius: var(--small-radius);
            padding: 4px 4px 4px 20px;
            position: relative;
            overflow: hidden;
        }
        
        .password-display {
            flex-grow: 1;
            font-family: 'JetBrains Mono', monospace;
            font-size: 16px;
            color: var(--text-primary);
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            padding: 12px 0;
        }
        
        .copy-btn {
            background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
            border: none;
            border-radius: var(--small-radius);
            width: 44px;
            height: 44px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            flex-shrink: 0;
            transition: all 0.2s ease;
        }
        
        .copy-btn:hover {
            transform: scale(1.05);
        }
        
        .copy-btn svg {
            width: 20px;
            height: 20px;
            fill: white;
        }
        
        .strength-meter {
            margin-top: 20px;
        }
        
        .meter-label {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
            color: var(--text-secondary);
            font-size: 14px;
        }
        
        .meter-bar {
            height: 8px;
            background-color: rgba(0, 0, 0, 0.2);
            border-radius: 4px;
            overflow: hidden;
        }
        
        .meter-fill {
            height: 100%;
            width: 0;
            border-radius: 4px;
            transition: width 0.3s ease, background-color 0.3s ease;
        }
        
        .options-section {
            padding: 25px;
        }
        
        .length-control {
            margin-bottom: 25px;
        }
        
        .option-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .option-title {
            font-weight: 600;
            font-size: 15px;
        }
        
        .length-badge {
            background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
            color: white;
            padding: 5px 12px;
            border-radius: 30px;
            font-weight: 600;
            font-size: 14px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            min-width: 46px;
        }
        
        input[type="range"] {
            -webkit-appearance: none;
            width: 100%;
            height: 6px;
            border-radius: 3px;
            background: var(--input-bg);
            outline: none;
        }
        
        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 22px;
            height: 22px;
            border-radius: 50%;
            background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
            cursor: pointer;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
            border: 2px solid rgba(255, 255, 255, 0.7);
        }
        
        .checkboxes-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            grid-gap: 15px;
        }
        
        .checkbox-wrapper {
            position: relative;
            display: flex;
            align-items: center;
            background-color: var(--input-bg);
            border-radius: var(--small-radius);
            padding: 12px 15px;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .checkbox-wrapper:hover {
            background-color: rgba(30, 30, 46, 0.8);
        }
        
        .checkbox-input {
            position: absolute;
            opacity: 0;
            cursor: pointer;
            height: 0;
            width: 0;
        }
        
        .checkbox-custom {
            width: 22px;
            height: 22px;
            background-color: rgba(0, 0, 0, 0.2);
            border-radius: 6px;
            position: relative;
            margin-right: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
        }
        
        .checkbox-input:checked ~ .checkbox-custom {
            background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
        }
        
        .checkbox-custom:after {
            content: "";
            position: absolute;
            display: none;
            width: 6px;
            height: 12px;
            border: solid white;
            border-width: 0 2px 2px 0;
            transform: rotate(45deg);
            top: 3px;
        }
        
        .checkbox-input:checked ~ .checkbox-custom:after {
            display: block;
        }
        
        .checkbox-label {
            font-size: 14px;
            color: var(--text-primary);
            font-weight: 500;
        }
        
        .generate-btn {
            width: 100%;
            padding: 15px;
            margin-top: 20px;
            border: none;
            border-radius: var(--small-radius);
            background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
            color: white;
            font-weight: 600;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(255, 92, 141, 0.3);
            letter-spacing: 0.5px;
        }
        
        .generate-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(255, 92, 141, 0.4);
        }
        
        .generate-btn:active {
            transform: translateY(0);
        }
        
        .toast {
            position: fixed;
            left: 50%;
            bottom: 30px;
            transform: translateX(-50%) translateY(100px);
            background: rgba(30, 30, 46, 0.9);
            backdrop-filter: blur(10px);
            color: white;
            padding: 12px 20px;
            border-radius: 50px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            font-size: 14px;
            font-weight: 500;
            opacity: 0;
            z-index: 1000;
            border: 1px solid rgba(255, 255, 255, 0.1);
            transition: all 0.3s cubic-bezier(0.68, -0.55, 0.27, 1.55);
            display: flex;
            align-items: center;
        }
        
        .toast-icon {
            color: var(--success-color);
            margin-right: 8px;
            font-size: 16px;
        }
        
        .show-toast {
            opacity: 1;
            transform: translateX(-50%) translateY(0);
        }
        
        @media (max-width: 580px) {
            .checkboxes-grid {
                grid-template-columns: 1fr;
                grid-gap: 10px;
            }
            
            .header h1 {
                font-size: 2rem;
            }
            
            .password-section, .options-section {
                padding: 20px;
            }
        }
    </style>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&family=JetBrains+Mono:wght@400;500&display=swap" rel="stylesheet">
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>VAULT MASTER</h1>
            <p>Create unbreakable passwords with a single click</p>
        </div>
        
        <div class="card">
            <div class="password-section">
                <div class="password-container">
                    <div class="password-display" id="passwordDisplay">
                        Click "Generate" for a new password
                    </div>
                    <button class="copy-btn" id="copyBtn">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                            <path d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z"/>
                        </svg>
                    </button>
                </div>
                
                <div class="strength-meter">
                    <div class="meter-label">
                        <span>Strength</span>
                        <span id="strengthText">Medium</span>
                    </div>
                    <div class="meter-bar">
                        <div class="meter-fill" id="strengthBar"></div>
                    </div>
                </div>
            </div>
            
            <div class="options-section">
                <div class="length-control">
                    <div class="option-header">
                        <span class="option-title">Password Length</span>
                        <span class="length-badge" id="lengthValue">12</span>
                    </div>
                    <input type="range" id="lengthSlider" min="4" max="64" value="12">
                </div>
                
                <div class="character-options">
                    <div class="option-header">
                        <span class="option-title">Character Types</span>
                    </div>
                    
                    <div class="checkboxes-grid">
                        <label class="checkbox-wrapper">
                            <input type="checkbox" class="checkbox-input" id="uppercaseCheck" checked>
                            <span class="checkbox-custom"></span>
                            <span class="checkbox-label">Uppercase (A-Z)</span>
                        </label>
                        
                        <label class="checkbox-wrapper">
                            <input type="checkbox" class="checkbox-input" id="lowercaseCheck" checked>
                            <span class="checkbox-custom"></span>
                            <span class="checkbox-label">Lowercase (a-z)</span>
                        </label>
                        
                        <label class="checkbox-wrapper">
                            <input type="checkbox" class="checkbox-input" id="numbersCheck" checked>
                            <span class="checkbox-custom"></span>
                            <span class="checkbox-label">Numbers (0-9)</span>
                        </label>
                        
                        <label class="checkbox-wrapper">
                            <input type="checkbox" class="checkbox-input" id="symbolsCheck" checked>
                            <span class="checkbox-custom"></span>
                            <span class="checkbox-label">Symbols (!@#$)</span>
                        </label>
                    </div>
                </div>
                
                <button class="generate-btn" id="generateBtn">GENERATE PASSWORD</button>
            </div>
        </div>
    </div>
    
    <div class="toast" id="toast">
        <span class="toast-icon">✓</span>
        Password copied to clipboard!
    </div>

    <script>
        // DOM Elements
        const passwordDisplay = document.getElementById('passwordDisplay');
        const lengthSlider = document.getElementById('lengthSlider');
        const lengthValue = document.getElementById('lengthValue');
        const uppercaseCheck = document.getElementById('uppercaseCheck');
        const lowercaseCheck = document.getElementById('lowercaseCheck');
        const numbersCheck = document.getElementById('numbersCheck');
        const symbolsCheck = document.getElementById('symbolsCheck');
        const generateBtn = document.getElementById('generateBtn');
        const copyBtn = document.getElementById('copyBtn');
        const toast = document.getElementById('toast');
        const strengthBar = document.getElementById('strengthBar');
        const strengthText = document.getElementById('strengthText');
        
        // Character sets
        const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        const lowercase = 'abcdefghijklmnopqrstuvwxyz';
        const numbers = '0123456789';
        const symbols = '!@#$%^&*()_+-=[]{}|;:\'",.<>/?\\';
        
        // Update length display
        lengthSlider.addEventListener('input', () => {
            lengthValue.textContent = lengthSlider.value;
        });
        
        // Generate password
        generateBtn.addEventListener('click', generatePassword);
        
        // Copy password
        copyBtn.addEventListener('click', () => {
            if (passwordDisplay.textContent !== 'Click "Generate" for a new password') {
                navigator.clipboard.writeText(passwordDisplay.textContent).then(() => {
                    showToast();
                });
            }
        });
        
        // Generate password
        function generatePassword() {
            // Ensure at least one character type is selected
            if (!uppercaseCheck.checked && !lowercaseCheck.checked && 
                !numbersCheck.checked && !symbolsCheck.checked) {
                alert('Please select at least one character type');
                return;
            }
            
            const length = parseInt(lengthSlider.value);
            let charset = '';
            let password = [];
            
            // Add characters from selected types
            if (uppercaseCheck.checked) charset += uppercase;
            if (lowercaseCheck.checked) charset += lowercase;
            if (numbersCheck.checked) charset += numbers;
            if (symbolsCheck.checked) charset += symbols;
            
            // Ensure we have at least one character from each selected type
            if (uppercaseCheck.checked && length > 0) {
                password.push(uppercase.charAt(Math.floor(Math.random() * uppercase.length)));
            }
            
            if (lowercaseCheck.checked && length > password.length) {
                password.push(lowercase.charAt(Math.floor(Math.random() * lowercase.length)));
            }
            
            if (numbersCheck.checked && length > password.length) {
                password.push(numbers.charAt(Math.floor(Math.random() * numbers.length)));
            }
            
            if (symbolsCheck.checked && length > password.length) {
                password.push(symbols.charAt(Math.floor(Math.random() * symbols.length)));
            }
            
            // Fill remaining length with random characters
            while (password.length < length) {
                password.push(charset.charAt(Math.floor(Math.random() * charset.length)));
            }
            
            // Shuffle the array
            password = shuffleArray(password);
            
            // Update display
            const finalPassword = password.join('');
            passwordDisplay.textContent = finalPassword;
            
            // Update strength meter
            updateStrengthMeter(finalPassword);
            
            // Button animation
            generateBtn.classList.add('btn-pulse');
            setTimeout(() => {
                generateBtn.classList.remove('btn-pulse');
            }, 300);
        }
        
        // Fisher-Yates shuffle algorithm
        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
            return array;
        }
        
        // Show toast message
        function showToast() {
            toast.classList.add('show-toast');
            setTimeout(() => {
                toast.classList.remove('show-toast');
            }, 2000);
        }
        
        // Update password strength meter
        function updateStrengthMeter(password) {
            // Calculate password strength
            let strength = 0;
            const length = password.length;
            
            // Length factor (0-25)
            strength += Math.min(length * 2, 25);
            
            // Character variety factors
            if (/[A-Z]/.test(password)) strength += 10;
            if (/[a-z]/.test(password)) strength += 10;
            if (/[0-9]/.test(password)) strength += 10;
            if (/[^A-Za-z0-9]/.test(password)) strength += 15;
            
            // Complexity patterns
            if (/[A-Z].*[A-Z]/.test(password)) strength += 5;
            if (/[a-z].*[a-z]/.test(password)) strength += 5;
            if (/[0-9].*[0-9]/.test(password)) strength += 5;
            if (/[^A-Za-z0-9].*[^A-Za-z0-9]/.test(password)) strength += 5;
            
            // Adjust final score to be between 0-100
            strength = Math.min(strength, 100);
            
            // Update strength bar
            strengthBar.style.width = strength + '%';
            
            // Set color based on strength
            if (strength < 30) {
                strengthBar.style.backgroundColor = 'var(--danger-color)';
                strengthText.textContent = 'Weak';
            } else if (strength < 60) {
                strengthBar.style.backgroundColor = 'var(--warning-color)';
                strengthText.textContent = 'Medium';
            } else if (strength < 80) {
                strengthBar.style.backgroundColor = 'var(--success-color)';
                strengthText.textContent = 'Strong';
            } else {
                strengthBar.style.background = 'linear-gradient(to right, var(--primary-color), var(--secondary-color))';
                strengthText.textContent = 'Very Strong';
            }
        }
        
        // Button animation
        const style = document.createElement('style');
        style.textContent = `
            @keyframes btn-pulse {
                0% { transform: scale(1); }
                50% { transform: scale(0.98); }
                100% { transform: scale(1); }
            }
            .btn-pulse {
                animation: btn-pulse 0.3s;
            }
            
            @keyframes glow {
                0% { box-shadow: 0 0 5px rgba(255, 92, 141, 0.5); }
                50% { box-shadow: 0 0 20px rgba(255, 92, 141, 0.8); }
                100% { box-shadow: 0 0 5px rgba(255, 92, 141, 0.5); }
            }
        `;
        document.head.appendChild(style);
        
        // Generate a password on page load
        generatePassword();
    </script>
</body>
</html>
